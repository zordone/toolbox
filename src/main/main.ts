import { app, BrowserWindow, screen, shell } from "electron";
import installDevTools, {
  REACT_DEVELOPER_TOOLS,
} from "electron-extension-installer";
import isDev from "electron-is-dev";
import windowStateKeeper from "electron-window-state";
import { setupApi } from "./mainApi";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// eslint-disable-next-line @typescript-eslint/no-require-imports -- this is the only way I found to make it work
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = async (): Promise<BrowserWindow> => {
  // Default window size.
  const { width: screenWidth, height: screenHeight } =
    screen.getPrimaryDisplay().size;
  const margins = Math.round(Math.min(screenWidth, screenHeight) * 0.1);
  const defaultWidth = screenWidth - margins;
  const defaultHeight = screenHeight - margins;

  // Load the previous state with fallback to defaults.
  const mainWindowState = windowStateKeeper({
    defaultWidth,
    defaultHeight,
  });

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    backgroundColor: "#242424",
    x: mainWindowState.x,
    y: mainWindowState.y,
    width: mainWindowState.width,
    height: mainWindowState.height,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // open target="_blank" links in the default browser
  mainWindow.webContents.setWindowOpenHandler(({ url }) => {
    shell.openExternal(url).then().catch(console.error);
    return { action: "deny" };
  });

  // Watch window position & size.
  mainWindowState.manage(mainWindow);

  // and load the index.html of the app.
  await mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY).then();

  // Open the DevTools.
  if (isDev) {
    mainWindow.webContents.openDevTools();
  }

  // Remove X-Frame-Options headers to allow embedding websites.
  // Only works in production mode.
  const urls = ["https://regex101.com/*", "https://caniuse.com/*"];
  mainWindow.webContents.session.webRequest.onHeadersReceived(
    { urls },
    (details, callback) => {
      if (details?.responseHeaders) {
        delete details.responseHeaders["X-Frame-Options"];
        delete details.responseHeaders["x-frame-options"];
      }
      callback({ cancel: false, responseHeaders: details.responseHeaders });
    },
  );

  return mainWindow;
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app
  .whenReady()
  .then(async () => {
    await installDevTools(REACT_DEVELOPER_TOOLS, {
      loadExtensionOptions: {
        allowFileAccess: true,
      },
    });
    const win = await createWindow();
    setupApi(win);
  })
  .catch(console.error);

// Quit when all windows are closed, even on macOS.
app.on("window-all-closed", () => {
  app.quit();
});
