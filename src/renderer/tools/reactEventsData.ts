import { reindent } from "../utils";

// 0         1      2          3            4*       5
// category, event, eventType, handlerType, example, className
/* prettier-ignore */
export const data = [
  ["Animation", "onAnimationEnd", "AnimationEvent<T>", "AnimationEventHandler<T>", "", "Element"],
  ["Animation", "onAnimationIteration", "AnimationEvent<T>", "AnimationEventHandler<T>", "", "Element"],
  ["Animation", "onAnimationStart", "AnimationEvent<T>", "AnimationEventHandler<T>", "", "Element"],
  ["Clipboard", "onCopy", "ClipboardEvent<T>", "ClipboardEventHandler<T>", "", "HTMLElement"],
  ["Clipboard", "onCut", "ClipboardEvent<T>", "ClipboardEventHandler<T>", "", "HTMLElement"],
  ["Clipboard", "onPaste", "ClipboardEvent<T>", "ClipboardEventHandler<T>", "", "HTMLElement"],
  ["Composition", "onCompositionEnd", "CompositionEvent<T>", "CompositionEventHandler<T>", "", "Element"],
  ["Composition", "onCompositionStart", "CompositionEvent<T>", "CompositionEventHandler<T>", "", "Element"],
  ["Composition", "onCompositionUpdate", "CompositionEvent<T>", "CompositionEventHandler<T>", "", "Element"],
  ["Focus", "onBlur", "FocusEvent<T,Element>", "FocusEventHandler<T>", "", "Element"],
  ["Focus", "onFocus", "FocusEvent<T,Element>", "FocusEventHandler<T>", "", "Element"],
  ["Form", "onBeforeInput", "FormEvent<T>", "FormEventHandler<T>", "", "Element"],
  ["Form", "onChange", "FormEvent<T>", "FormEventHandler<T>", "", "HTMLElement"],
  ["Form", "onInput", "FormEvent<T>", "FormEventHandler<T>", "", "Element"],
  ["Form", "onInvalid", "FormEvent<T>", "FormEventHandler<T>", "", "HTMLInputElement"],
  ["Form", "onReset", "FormEvent<T>", "FormEventHandler<T>", "", "HTMLFormElement"],
  ["Form", "onSubmit", "FormEvent<T>", "FormEventHandler<T>", "", "HTMLFormElement"],
  ["Image", "onError", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLElement"],
  ["Image", "onLoad", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLElement"],
  ["Keyboard", "onKeyDown", "KeyboardEvent<T>", "KeyboardEventHandler<T>", "", "Element"],
  ["Keyboard", "onKeyPress", "KeyboardEvent<T>", "KeyboardEventHandler<T>", "", "Element"],
  ["Keyboard", "onKeyUp", "KeyboardEvent<T>", "KeyboardEventHandler<T>", "", "Element"],
  ["Media", "onAbort", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onCanPlay", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onCanPlayThrough", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onDurationChange", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onEmptied", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onEncrypted", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onEnded", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onLoadedData", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onLoadedMetadata", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onLoadStart", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onPause", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onPlay", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onPlaying", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onProgress", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onRateChange", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onResize", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "only"],
  ["Media", "onSeeked", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onSeeking", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onStalled", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onSuspend", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onTimeUpdate", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onVolumeChange", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Media", "onWaiting", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLMediaElement"],
  ["Mouse", "onAuxClick", "MouseEvent<T,MouseEvent>", "MouseEventHandler<T>", "", "Element"],
  ["Mouse", "onClick", "MouseEvent<T,MouseEvent>", "MouseEventHandler<T>", "", "Element"],
  ["Mouse", "onContextMenu", "MouseEvent<T,MouseEvent>", "MouseEventHandler<T>", "", "Element"],
  ["Mouse", "onDoubleClick", "MouseEvent<T,MouseEvent>", "MouseEventHandler<T>", "", "Element"],
  ["Mouse", "onDrag", "DragEvent<T>", "DragEventHandler<T>", "", "HTMLElement"],
  ["Mouse", "onDragEnd", "DragEvent<T>", "DragEventHandler<T>", "", "HTMLElement"],
  ["Mouse", "onDragEnter", "DragEvent<T>", "DragEventHandler<T>", "", "HTMLElement"],
  ["Mouse", "onDragExit", "DragEvent<T>", "DragEventHandler<T>", "", "only"],
  ["Mouse", "onDragLeave", "DragEvent<T>", "DragEventHandler<T>", "", "HTMLElement"],
  ["Mouse", "onDragOver", "DragEvent<T>", "DragEventHandler<T>", "", "HTMLElement"],
  ["Mouse", "onDragStart", "DragEvent<T>", "DragEventHandler<T>", "", "HTMLElement"],
  ["Mouse", "onDrop", "DragEvent<T>", "DragEventHandler<T>", "", "HTMLElement"],
  ["Mouse", "onMouseDown", "MouseEvent<T,MouseEvent>", "MouseEventHandler<T>", "", "Element"],
  ["Mouse", "onMouseEnter", "MouseEvent<T,MouseEvent>", "MouseEventHandler<T>", "", "Element"],
  ["Mouse", "onMouseLeave", "MouseEvent<T,MouseEvent>", "MouseEventHandler<T>", "", "Element"],
  ["Mouse", "onMouseMove", "MouseEvent<T,MouseEvent>", "MouseEventHandler<T>", "", "Element"],
  ["Mouse", "onMouseOut", "MouseEvent<T,MouseEvent>", "MouseEventHandler<T>", "", "Element"],
  ["Mouse", "onMouseOver", "MouseEvent<T,MouseEvent>", "MouseEventHandler<T>", "", "Element"],
  ["Mouse", "onMouseUp", "MouseEvent<T,MouseEvent>", "MouseEventHandler<T>", "", "Element"],
  ["Other", "onToggle", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLElement"],
  ["Pointer", "onGotPointerCapture", "PointerEvent<T>", "PointerEventHandler<T>", "", "Element"],
  ["Pointer", "onLostPointerCapture", "PointerEvent<T>", "PointerEventHandler<T>", "", "Element"],
  ["Pointer", "onPointerCancel", "PointerEvent<T>", "PointerEventHandler<T>", "", "Element"],
  ["Pointer", "onPointerDown", "PointerEvent<T>", "PointerEventHandler<T>", "", "Element"],
  ["Pointer", "onPointerEnter", "PointerEvent<T>", "PointerEventHandler<T>", "", "Element"],
  ["Pointer", "onPointerLeave", "PointerEvent<T>", "PointerEventHandler<T>", "", "Element"],
  ["Pointer", "onPointerMove", "PointerEvent<T>", "PointerEventHandler<T>", "", "Element"],
  ["Pointer", "onPointerOut", "PointerEvent<T>", "PointerEventHandler<T>", "", "Element"],
  ["Pointer", "onPointerOver", "PointerEvent<T>", "PointerEventHandler<T>", "", "Element"],
  ["Pointer", "onPointerUp", "PointerEvent<T>", "PointerEventHandler<T>", "", "Element"],
  ["Selection", "onSelect", "SyntheticEvent<T,Event>", "ReactEventHandler<T>", "", "HTMLInputElement"],
  ["Touch", "onTouchCancel", "TouchEvent<T>", "TouchEventHandler<T>", "", "Element"],
  ["Touch", "onTouchEnd", "TouchEvent<T>", "TouchEventHandler<T>", "", "Element"],
  ["Touch", "onTouchMove", "TouchEvent<T>", "TouchEventHandler<T>", "", "Element"],
  ["Touch", "onTouchStart", "TouchEvent<T>", "TouchEventHandler<T>", "", "Element"],
  ["Transition", "onTransitionEnd", "TransitionEvent<T>", "TransitionEventHandler<T>", "", "Element"],
  ["UI", "onScroll", "UIEvent<T,UIEvent>", "UIEventHandler<T>", "", "Element"],
  ["Wheel", "onWheel", "WheelEvent<T>", "WheelEventHandler<T>", "", "Element"],
];

// fill out the example column
data.forEach((row) => {
  const [_category, event, eventType, handlerType, _example, _className] = row;
  row[4] = reindent(`
    const ${event}: ${handlerType} = 
      useCallback((event: ${eventType}) => {}, []);
  `).replace(/\bT\b/g, "HTMLInputElement");
  // TODO: correct example type into the data
});
